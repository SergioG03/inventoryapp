pipeline {
    agent any

    environment {
        DOCKER_COMPOSE = 'docker compose'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    // Crear archivo .env
                    writeFile file: '.env', text: '''
                        # Frontend
                        REACT_APP_API_URL=http://localhost/api

                        # Backend
                        MONGODB_URI=mongodb+srv://sergiogonzzp:2003@inventoryapp.yuxtk.mongodb.net/
                        JWT_SECRET=your_jwt_secret_here
                        PORT=5000
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            sh 'npm install'
                            sh 'npm install --save-dev @babel/plugin-proposal-private-property-in-object'
                        }
                    }
                }
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            sh 'npm install'
                            sh 'npm install --save-dev mocha chai supertest'
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            parallel {
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            sh 'CI=true npm test -- --passWithNoTests'
                        }
                    }
                }
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            sh 'npm test || true'
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'docker compose build'
            }
        }

        stage('Deploy') {
            steps {
                sh 'docker compose up -d'
            }
        }

        stage('Health Check') {
            steps {
                script {
                    sh 'sleep 30'
                    sh '''
                        curl -f http://localhost:80 || true
                        curl -f http://localhost:5000/api/health || true
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                sh 'docker compose down || true'
                cleanWs()
            }
        }
        success {
            echo 'Pipeline ejecutado exitosamente!'
        }
        failure {
            echo 'El pipeline ha fallado'
        }
    }
}

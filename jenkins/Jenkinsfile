pipeline {
    agent any

    environment {
        DOCKER_COMPOSE = 'docker-compose'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            parallel {
                stage('Frontend Dependencies') {
                    steps {
                        dir('frontend') {
                            sh 'npm install'
                        }
                    }
                }
                stage('Backend Dependencies') {
                    steps {
                        dir('backend') {
                            sh 'npm install'
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            parallel {
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm test -- --watchAll=false'
                        }
                    }
                }
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            sh 'npm test'
                        }
                    }
                }
            }
        }

        stage('Build and Deploy') {
            steps {
                script {
                    // Construir y levantar los contenedores
                    sh 'docker-compose build'
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    // Esperar a que los servicios estén disponibles
                    sh 'sleep 30'  // Dar tiempo a que los servicios inicien
                    
                    // Verificar que el frontend está respondiendo
                    sh 'curl -f http://localhost:80 || exit 1'
                    
                    // Verificar que el backend está respondiendo
                    sh 'curl -f http://localhost:5000/api/health || exit 1'
                }
            }
        }
    }

    post {
        always {
            // Limpiar contenedores y workspace
            sh 'docker-compose down'
            cleanWs()
        }
        success {
            echo 'Pipeline ejecutado exitosamente!'
        }
        failure {
            echo 'El pipeline ha fallado'
        }
    }
}
